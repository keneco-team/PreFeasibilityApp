import{b5 as p,s,Q as i}from"./index-C5fQgfn7.js";import{l as n}from"./MeshVertexAttributes-DLblnjvT.js";import{M as c}from"./vertexSpaceConversion-xTf0052P.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-C2IpMxls.js";import"./computeTranslationToOriginAndRotation-DBQU8ZHk.js";import"./meshVertexSpaceUtils-DJHliOVE.js";import"./MeshLocalVertexSpace-Df21SZy4.js";import"./vec3-CFMEoTRZ.js";import"./projection-CxKSWbtP.js";import"./DoubleArray-jXGnZc0M.js";import"./BufferView-Bw8vP5Ox.js";import"./vec4-CovLrSv-.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
