import{b5 as p,s,Q as i}from"./index-ClTjQjsy.js";import{l as n}from"./MeshVertexAttributes-Ctt2946F.js";import{M as c}from"./vertexSpaceConversion-Dn-GFpkq.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CN29C-wf.js";import"./computeTranslationToOriginAndRotation-BWeZeGfN.js";import"./meshVertexSpaceUtils-DERbdtQ9.js";import"./MeshLocalVertexSpace-BjXaAwSd.js";import"./vec3-CEiDDtm3.js";import"./projection-D38zqaNy.js";import"./DoubleArray-DL1a4m2n.js";import"./BufferView-C0_5nq73.js";import"./vec4-BiSTzBFd.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
