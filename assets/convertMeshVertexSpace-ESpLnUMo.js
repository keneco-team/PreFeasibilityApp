import{b5 as p,s,Q as i}from"./index-EUprzwra.js";import{l as n}from"./MeshVertexAttributes-CwLiJJGg.js";import{M as c}from"./vertexSpaceConversion-BWxOi9QQ.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-FYjsTT_G.js";import"./computeTranslationToOriginAndRotation-BLhdi9Yh.js";import"./meshVertexSpaceUtils-BgY-3rFj.js";import"./MeshLocalVertexSpace-DlGHzjba.js";import"./vec3-ClYo54Mm.js";import"./projection-BNX1muBe.js";import"./DoubleArray-Bk93ZM9I.js";import"./BufferView-3j-GG2tB.js";import"./vec4-IaBqZgc_.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
