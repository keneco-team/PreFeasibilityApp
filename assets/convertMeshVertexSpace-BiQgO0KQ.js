import{b5 as p,s,Q as i}from"./index-Cey3Bnmd.js";import{l as n}from"./MeshVertexAttributes-B-mUr0-q.js";import{M as c}from"./vertexSpaceConversion-CGewNSws.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-DiFxLxw2.js";import"./computeTranslationToOriginAndRotation-CY8oYY1j.js";import"./meshVertexSpaceUtils-Ce7IhwS2.js";import"./MeshLocalVertexSpace--ll6HRvu.js";import"./vec3-BJ9vVGCJ.js";import"./projection-DL9hAdrd.js";import"./DoubleArray-BJ2UuN2I.js";import"./BufferView-BGJ71b9y.js";import"./vec4-B1i2I-vA.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
